name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.VERSION }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.VERSION }}
            type=raw,value=latest

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./config/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's Changed" > changelog.md
            echo "" >> changelog.md
            git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD >> changelog.md
            echo "" >> changelog.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.version.outputs.TAG }}" >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "This is the first release of ${{ github.repository }}." >> changelog.md
          fi
          
          # Set multiline output
          {
            echo 'CHANGELOG<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGLOG }}
          draft: false
          prerelease: false
          files: |
            LICENSE
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
        continue-on-error: true

      - name: Notify release success
        run: |
          echo "üéâ Release ${{ steps.version.outputs.VERSION }} has been successfully created!"
          echo "üì¶ Docker images:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "üîç Platforms: linux/amd64, linux/arm64, linux/arm/v7"
          echo "üìã Release notes generated and published"