[uwsgi]
# Who will run the code
uid = searxng
gid = searxng

# Performance optimizations
# Number of workers (adjust based on CPU cores)
workers = 4

# Number of threads per worker (increased for better concurrency)
threads = 8

# Memory optimizations
# Restart worker if RSS memory exceeds 512MB
reload-on-rss = 512
# Kill requests taking longer than 30 seconds
harakiri = 30
# Restart workers after handling 1000 requests (prevents memory leaks)
max-requests = 1000
# Add some jitter to prevent all workers restarting at once
max-requests-delta = 100

# The right granted on the created socket
chmod-socket = 666

# Plugin to use and interpreter config
single-interpreter = true
master = true
plugin = python3
lazy-apps = true
enable-threads = 4

# Module to import
module = searx.webapp

# Virtualenv and python path
pythonpath = /usr/local/searxng/
chdir = /usr/local/searxng/searx/

# automatically set processes name to something meaningful
auto-procname = true

# Disable request logging for privacy
disable-logging = true
log-5xx = true

# Buffer optimizations for better performance
# Increase buffer size for better performance
buffer-size = 16384
# Increase post buffer size
post-buffering = 8192
# Increase listen queue
listen = 1024

# No keep alive
# See https://github.com/searx/searx-docker/issues/24
add-header = Connection: close

# Follow SIGTERM convention
# See https://github.com/searxng/searxng/issues/3427
die-on-term

# uwsgi serves the static files with optimizations
static-map = /static=/usr/local/searxng/searx/static
# Enable static file caching (1 hour)
static-expires-uri = /static/.* 3600
# Compress static files
static-gzip-all = true
# Enable memory reporting for monitoring
memory-report = true
# Use cheaper algorithm for dynamic worker scaling
cheaper-algo = spare
cheaper = 2
cheaper-initial = 2
cheaper-step = 1
# expires set to one day
static-expires = /* 86400
static-gzip-all = True
offload-threads = 4
